" Globally applicable settings should be applied here, as well as anything else
" that needs to be loaded before the config files get executed.
"
" Some settings for search
set incsearch
set hlsearch
nnoremap <F3> :set hlsearch!<CR>

" Rails.vim is ignoring my desires!
autocmd FileType ruby,eruby,yaml,rspec set tw=80 ai sw=2 sts=2 et
autocmd FileType ruby,eruby,yaml setlocal foldmethod=manual
autocmd User Rails set tabstop=2 shiftwidth=2 softtabstop=2 expandtab

set wildignore+=
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/.gem/**     " MacOSX/Linux
" Sane Ignore For ctrlp
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.git$\|\.hg$\|\.gem$\|\.yardoc\|public\/images\|public\/system\|data\|log\|tmp$',
            \ 'file': '\.exe$\|\.so$\|\.dat$'
            \ }

" Get solarized to work right
set t_Co=256
color solarized
let g:solarized_termcolors=256
let g:solarized_termtrans=1
autocmd ColorScheme * highlight clear SignColumn

" Format the current buffer
nnoremap <Leader>fmt ggVG=`

" Custom mappings for CtrlP
map <c-b> :CtrlPBuffer<CR>
map <C-M> :CtrlPMRU<CR>

" ***********************************
" GVIM vs VIM (easier to just have
" one config file)
" ***********************************
"
" Dark works better in the terminal
if has('gui_running')
    set background=light
    " turn powerline timeout
    " see https://powerline.readthedocs.org/en/latest/tipstricks.html#vim
    set ttimeoutlen=10
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END
else
    set background=dark
endif

" format
nmap <Leader>fa ggVG=

" hashrocket
imap <C-l> <Space>=><Space>

" toggle symbol <=> string
imap <C-k> <C-o>b:<Esc>Ea
nmap <C-k> lbi:<Esc>E

" A couple from airblade:https://github.com/airblade/dotvim/blob/master/vimrc
" Scroll on space bar
nnoremap <Space> <C-F>
nnoremap <S-Space> <C-B>
" Turn off highlighting
nnoremap <Leader><Space> :noh<CR>
" Kill trailing whitespace
nnoremap <Leader>ws :%s/\s\+$//<CR>
" Copy to / paste from system pasteboard.
" (Use `:put *<CR>` and `:put! *<CR>` for linewise pasting.)
noremap <Leader>p :set paste<CR>"*p:set nopaste<CR>
noremap <Leader>P :set paste<CR>"*P:set nopaste<CR>
" Make Y consistent with D and C (instead of yy)
noremap Y y$
" Duplicate and comment out duplicate.
nmap <leader>dc :t.<CR>k<Plug>NERDComComment
" Ruby: convert 1.8 hash syntax to 1.9, e.g `:foo => bar` to `foo: bar`.
map <Leader>h :s/\v:(\w+)\s*\=\>\s*(\S)/\1: \2/<CR>:noh<CR>
" Tabularize
nmap <Leader>t= :Tabularize /=<CR>
vmap <Leader>t= :Tabularize /=<CR>
" key: value
nmap <Leader>t: :Tabularize /:\zs<CR>
vmap <Leader>t: :Tabularize /:\zs<CR>
" Ruby symbols
nmap <Leader>ts :Tabularize /:/l1c0l0<CR>
vmap <Leader>ts :Tabularize /:/l1c0l0<CR>
" vim-gitgutter
let g:gitgutter_sign_column_always = 1

" From https://coderwall.com/p/tmsljq
" Surround text currently selected while in visual mode
" (The surrounded text is kept selected after being surround)
vmap <leader>" S"lvi"
vmap <leader>' S'lvi'
vmap <leader>` S`lvi`
vmap <leader>( S)lvi(
vmap <leader>{ S}lvi{
vmap <leader>[ S]lvi[
vmap <leader>< S>lvi<

" Mappings for Vim-Rspec (https://github.com/thoughtbot/vim-rspec)
let g:rspec_command = "Dispatch zeus spec {spec}"
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>ss :call RunNearestSpec()<CR>
map <Leader>ls :call RunLastSpec()<CR>
map <Leader>as :call RunAllSpecs()<CR>

" CtrlP Extensions
let g:ctrlp_extensions = ['yankring', 'quickfix', 'changes', 'mixed']
noremap <Leader>yr :CtrlPYankring<CR>

" Mappings for neosnippet https://github.com/Shougo/neosnippet.vim
let g:neosnippet#snippets_directory .= ", ~/.dotfiles/vim/snippets"
imap <expr><TAB> neosnippet#jumpable() ?
            \ "\<Plug>(neosnippet_jump)"
            \: pumvisible() ? "\<C-n>" : "\<TAB>"

smap <expr><Tab> neosnippet#jumpable() ?
            \ "\<Plug>(neosnippet_jump)"
            \: "\<Tab>"

imap <expr><CR> neosnippet#expandable() ?
            \ "\<Plug>(neosnippet_expand)"
            \: pumvisible() ? "\<C-n>" : "\<CR>"

smap <expr><CR> neosnippet#expandable() ?
            \ "\<Plug>(neosnippet_expand)"
            \: "\<CR>"

if has('conceal')
    set conceallevel=2 concealcursor=i
endif

" Get rid of unused bundles
UnBundle 'vim-scala'
UnBundle 'vim-golang'
UnBundle 'vim-gocode'
UnBundle 'bitc/vim-hdevtools'
UnBundle 'adinapoli/cumino'
UnBundle 'scrooloose/nerdtree'
UnBundle 'jistr/vim-nerdtree-tabs'
UnBundle 'spf13/PIV'
UnBundle 'spf13/vim-autoclose'
UnBundle 'arnaud-lib/vim-php-namespace'
UnBundle 'klen/python-mode'
UnBundle 'python.vim'
UnBundle 'python_match.vim'
UnBundle 'pythoncomplete'
UnBundle 'vim-sbt'
UnBundle 'travitch/hasksyn'
UnBundle 'dag/vim2hs'
UnBundle 'Twinside/vim-haskellConceal'
UnBundle 'lukerandall/haskellmode-vim'
UnBundle 'ujihisa/neoc-ghc'
UnBundle 'beyondwords/vim-twig'
UnBundle 'ujihisa/neoc-ghc'
UnBundle 'numbers.vim'

