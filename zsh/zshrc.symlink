export CASE_SENSITIVE="true"

# zmodload zsh/zprof

# load profile from ~/.profile, since other shells will use that too
[[ -e ~/.profile ]] && emulate sh -c 'source ~/.profile'

# Grab some useful env variables i don't want in
# a repository
local_env_file=$DOTFILES_DIR/env.local
[[ -f $local_env_file ]] && source $local_env_file

# stuff for antibody
DISABLE_AUTO_UPDATE=true
export ZSH="$(antibody home)/https-COLON--SLASH--SLASH-github.com-SLASH-ohmyzsh-SLASH-ohmyzsh"
export ZSH_CACHE_DIR=$ZSH/cache
export ZSH_BUNDLES_FILE="$DOTFILES_DIR/antibody/zsh_bundles.txt"
export ZSH_PLUGINS_FILE="$DOTFILES_DIR/antibody/zsh_plugins.zsh"

source <(antibody init)
source $ZSH_PLUGINS_FILE

# and direnv
eval "$(direnv hook zsh)"

# and zaw
source $SUBMODULES_DIR/zaw/zaw.zsh

# and nix
if [ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then . $HOME/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# The next line updates PATH for Netlify's Git Credential Helper.
if [ -f '$HOME/.netlify/helper/path.zsh.inc' ]; then source '$HOME/.netlify/helper/path.zsh.inc'; fi

# Add asdf
source ${DOTFILES_DIR}/submodule/asdf/asdf.sh
source ${DOTFILES_DIR}/submodule/asdf/completions/asdf.bash

# load all of our zsh files, except for submodules, os and completions
typeset -U config_files
config_files=($DOTFILES_DIR/**/*.zsh)

for file in ${${config_files:#*/submodule/**/*.zsh}:#*/zsh/os/**/*.zsh}
do
  source $file
done

# os specific config
if islinux; then
    typeset -U os_config_files
    os_config_files=($DOTFILES_DIR/zsh/os/linux/**/*.zsh)
    for file in ${os_config_files}
    do
        # source $file
    done
fi

if isdarwin; then
    typeset -U os_config_files
    os_config_files=($DOTFILES_DIR/zsh/os/mac/**/*.zsh)
    for file in ${os_config_files}
    do
        # source $file

    done
fi

# machine specific config
machine_config="$zsh/machine/`hostname`.zsh"
if [ -f $machine_config ]; then
  # source $machine_config
fi

# setup the projects dir
if [ -d $HOME/projects ]; then
    export PROJECTS="$HOME/projects"
    export CDPATH=$PROJECTS:$HOME:$CDPATH
fi

###########################################
## completion stuff
## from: https://gist.github.com/ctechols/ca1035271ad134841284
###########################################

zstyle ':compinstall' filename '$HOME/.zshrc'

zcachedir="$HOME/.zcache"
[[ -d "$zcachedir" ]] || mkdir -p "$zcachedir"

_update_zcomp() {
    setopt local_options
    setopt extendedglob
    autoload -Uz compinit
    local zcompf="$1/zcompdump"
    # use a separate file to determine when to regenerate, as compinit doesn't
    # always need to modify the compdump
    local zcompf_a="${zcompf}.augur"

    if [[ -e "$zcompf_a" && -f "$zcompf_a"(#qN.md-1) ]]; then
        compinit -C -d "$zcompf"
    else
        compinit -d "$zcompf"
        touch "$zcompf_a"
    fi
    # if zcompdump exists (and is non-zero), and is older than the .zwc file,
    # then regenerate
    if [[ -s "$zcompf" && (! -s "${zcompf}.zwc" || "$zcompf" -nt "${zcompf}.zwc") ]]; then
        # since file is mapped, it might be mapped right now (current shells), so
        # rename it then make a new one
        [[ -e "$zcompf.zwc" ]] && mv -f "$zcompf.zwc" "$zcompf.zwc.old"
        # compile it mapped, so multiple shells can share it (total mem reduction)
        # run in background
        zcompile -M "$zcompf" &!
    fi
}
_update_zcomp "$zcachedir"
unfunction _update_zcomp

eval `dircolors ~/.dir_colors/dircolors`
source ~/.dotfiles/zsh/fleadope.zsh-theme
